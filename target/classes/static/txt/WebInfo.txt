
    /* Kurze Anleitung BoteFX  */

    ********************** WAS mus gemacht sein *****************************************

    1. FreundeCellController: Zeile 273 (globalFehler)
        a. Globale Fehler function fertigstellen(bis jetzt noch nicht gemacht, außer diese methode)
        a. in Bote/mysql Datenbank für globale Fehler anlegen
        b. von BoteFx eine Request Api aufbauen
        c. ......
    2.FreundeCellControlller Zeile: 407 (neu anlegen)

    3. Bekannten Einladen (ändern oder löschen oder begrenzen auf 20 ),
        EinladenController Zeile: 270

    4. MessageController: freunde Online Zeit, das label für die anzeige, befindet
        sich in die message-header, methode: headerFreundeDaten Zeile: 316

    ***************************** ALLGEMEIN *********************************************

    1. *** Allgemein zur fxml Load
        a. login fxml + chatbox.fxml werden nur von ViewService abgerufen,
           ViewService = zuerst wird auf vorhandenen token* geprüft, wenn nicht vorhanden
           ist dann login seite anzeigen.
           wenn token da ist dann die chatbox.fxml anzeigen (BoteApp Zeile: 53)
           *token = wird bei registrierung in einem token.json gespeichert

        b. alles was wird in chatbox.fxml (leftPane & rightPane) angezeigt wird von
           LayoutService abgerufen...
           die unter 4 buttons (kontakte, telefon, chat und setting) werden nur in
           leftPane angezeigt..
           message & setting daten werden in rightPane angezeigt

    ****************************** BILDER ***********************************************
    1. Bild an Freunde-Cell laden & anzeigen, FreundeCellCotroller/setProperties Zeile 122
       Bild wird einfach per URL von der Bote datei 'profilbild' geladen/angezeigt
       // Image freundImg = new Image(ConfigService.FILE_HTTP+"profilbild/"+freundBild+".png", false);
       // ImageView imageView = new ImageView(freundImg);

    2

    **************************** CSS STYLE **********************************************
    1. MessageController
        a. messageLoschenDisabled + messageLoschenAktiv.fxml: Zeile ab 850
        background: #FFF5F5;
        Bilder: 25x25
        Text Color: Red, Blau, #333333, #999999


    ************************** Pop-Up-Fenster über die Ganze Stage(APP) ************************

       ACHTUNG: für die globale Pop-upFenster anzuzeigen stehen zu Verfügund insgesammt 4 StackPane
                in chatbox.fxml + ChatBoxController( als Setter & Getter)
                    @FXML private StackPane hauptStackPane;
                    @FXML private StackPane leftStackPane;
                    @FXML private StackPane rightStackPane;


       * ChatBoxController.java
       * auf dem ganzen Haupt Stage(StackPane) wir eine AnchorPane draufgesetzt mit der
       * click function 'setOnMouseClicked' um der angezeigte Pop-up-Fenster zu schliessen.
       * Beispiel: MessageController/messageBearbeiten(..
                //aufbaue eine pane über die ganze Stage, und ober Rechts das Pop-up-Fenster
                StackPane hauptStage = chatBoxController.getHauptStackPane();
                AnchorPane bearPane = new AnchorPane();

                // click auf die AnchorPane(bearPane), um Pop-Up-Fester auszublenden
                        bearPane.setOnMouseClicked(mouseEvent -> {
                                popUpFensterClose(bearPane);
                        });

       Benutzen Beispiel:
        Controller:
            @Autowired
            private ChatBoxController chatBoxController;

        // aufbaue eine pane über die ganze Stage
           StackPane hauptStage = chatBoxController.getHauptStackPane();

               // neue AnchorPan erstellen + style + 100% width ziehen
               AnchorPane bearPane = new AnchorPane();
               bearPane.setStyle("-fx-background-color: transparent;");
               bearPane.prefWidthProperty().bind(hauptStage.widthProperty());
               bearPane.prefHeightProperty().bind(hauptStage.heightProperty());

               // einbinden
               bearPane.getChildren().add(Pop-up-Fenster);
               hauptStage.getChildren().add(bearPane);

    *************************** PANE SLIDER ( APP/VERKLEINERN/VERGRßERN) ****************


    *************************** ENDE SLIEDER *******************************************





    **************************** Token **************************************************
    Neuer Token wird nur bei Neun Registrierung angelegt

     konfiguriert: in Bote/konfiguration/GlobalConfig/ IdentifikationToken
     Gespeichert in MySql Database: globalBote, Tabelle: usern

     mit E-Mail oder Telefon registrieren von BoteFX:

        Gespeichert(BoteFX):    als response von ApiMailController(Bote)* bekommen: Zeile: 159
                                return ResponseEntity.status(HttpStatus.OK).body(userResponse);
                                                +
                                als response von ApiTelefonController(Bote)* bekommen: Zeile: 154
                                 return ResponseEntity.status(HttpStatus.OK).body(dataResponse);
                                                Weiter in BoteFX
                                gespeichert in BoteFX/h2database/localBoteFx/TOKEN
                                MailRegisterController(BoteFX) Zeile: 148
                                tokenService.saveToken(newToken);
                                        und
                                BoteFX/resources/static/json/token.json
                                Benutzt von ViewService/ Zeile: 49
                                String myToken = tokenService.tokenHolen();
        Gespeichert(Bote)
        * mit E_Mail
        Benutzt(Bote):          ApiMailController Zeile: 94
                                neuerToken = GlobalConfig.IdentifikationToken();
        Gespeichert(mysql):     ApiMailController Zeile: 127
                                userService.saveNewUser(neuerUser);
        * mit Telefon
        Benutzt(Bote):          ApiTelefonController Zeile: 89
                                neuToken = GlobalConfig.IdentifikationToken();
        Gespeichert(mysql):     ApiTelefonController Zeile: 122
                                userService.saveNewUser(neuUser);





    **************************** Database: h2database/localBoteFx ***********************

    1. Quelle: BoteFX/h2database/localBoteFx, model: Token
       nach erfolgreichen Registrierung wird nur Token gespeichert:
       a. MailRegisterController: Zeile: 142
       b. TelefonRegisterController Zeile: 132

    *********************** Freunde Anzeigen ******************************************

    alle meine Chat-Freunde werden in leftPane angezeigt..
    Kurze Beschribung:
        1. in der chatbox.fxml/<AnchorPane fx:id="leftPane"> wird eine
            BorderPane integriert mit Center & Bottom,
            in Center(#freundePane) werden Freunde geladen(beschreibung unter punkt a)
            in Bottom 4 IMG (Kontakte, Telefon, Chat & Setting)

            a.  im Center <AnchorPane fx:id="freundePane" wird eine
                freunde.fxml geladen mit dem Borderpane (tot & center),
                im top werden Freunde Remove & Freunde Einladen integriert
                im Center zuerts ist eine scrollpane und da drinn ist einen VBox
                mit dem #freundeVBox und hier werden schon die alle meine Freunde geladen

        2. Reihe folge geladene fxml dateien:
            chatbox.fxml/#leftPane/freundePane ->(ChatBoxController Zeile:105) ->
            // wird geleden
           freunde.fxml/center/scrollPane/freundeVBox (FreundeController Zeile: 162) ->
            // wird geladen
           freundecell.fxml (hier sind die Daten von einem Freunde)
           a. freundecell.fxml wird durch eine for schleife() geladen(array mit dem freunden daten),
              für jeder Freunde-daten wir einen controller erstellt,

              @Controller
              @Scope(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
              public class FreundeCellController implements Initializable {
                   /*
                      hier wird den array ausgewertet ausgegeben
                      public void setProperties(Freunde frienden) {
                              this.friend = frienden;
                         }
                      zugeschickt per setProperties()
                      FreundeController Zeile: 168
                   */
              }
    ******************* Bekannten Einladen (unten einladung annehmen) ***************************

    mit einem click auf den icon(männchen mit plus) werden alle(aktuell) gespeicherte
    user angezeigt, mit dem doppelklick auf die adresse wird die mail/telefonnummer in das Feld übernommen
        1. mail/telefon nicht gefunden = wird anderer Button(Bekannten zu Bote Einladen) aktiviert,
            den 'OK' button wird deaktiviert, bei versuch die mail/telefon zu korrigieren werden die Buttons
            auf die vorherige einstellung zurückgesetzt...
        2. eigenes mail/telefonnummer oder schon als Freund vorhanden sind auch nicht erlaubt

        3. CSS-Einstellungen: Ausblenden von Scrollbalken von Table-View (wo sind alle user gelistet)
           sind in EinladenController Zeile: ab 325 gemacht
                    // TableView Autoresize + scroll ausblenden
                   einladenTable.setColumnResizePolicy(TableView.CONSTRAINED_RESIZE_POLICY);
                   einladenCount.prefWidthProperty().bind(einladenTable.widthProperty().divide(4)); // w * 1/4
                   einladenName.prefWidthProperty().bind(einladenTable.widthProperty().divide(4)); // w * 1/4
                   einladenMail.prefWidthProperty().bind(einladenTable.widthProperty().divide(2)); // w * 1/2
        4. .....Später Löschen oder ändern oder begrenzen


    ******************* Eingeladung annehmen oder ablehnen ***********

    unter die haup-archorpane in der freundecell.fxml ist einen VBox mit #freundeInfo/visible=false
      angelegt, in dieser VBox werde die 2 Buttons für die Annehmen Oder Ablehnen hinterlegt,
      a. bei Einladung eines Chat-Freund werden gleich die Daten von Beiden in der Tabelle/freunde
        unter neue generiertes messageToken angelegt mit der ausname:
        in die spalte role werden keys gespechert: 'werdeeingeladen' und 'warteaufok'
        Bote/ApiEinlderController/
        private void neuerChatSave(Usern meinData, Usern freundData){
                                          String      werdeEingeladen     = "werdeeingeladen";
                                          String      wartenAufOk         = "wartenaufok";
                                          String unsereMessageToken = GlobalConfig.IdentifikationToken();
                                          ..........
                                                  Freunde meinChatSave = new Freunde();
                                                  ...............
                                                  meinChatSave.setMessagetoken(unsereMessageToken);
                                                  meinChatSave.setRole(werdeEingeladen);
                                          }
       b. Angezeigte information mit den 2 BUTTONS von Eingeladenen:
        bei FreundeCellController/setProperties Zeile: 180  String einladenInfo = friend.getRole();
        werde aus dem getRole information ausgelesen und entspechende methoden gestartet.
        1. wen getRole leer ist wird nichts gemacht
        2. getRole= warteaufok, wird die methode: warteAufOk() gestartet und info ausgegeben und
            warten von eingeldenen annehmen oder ablenen
        3. getRole = werdeeingeladen, wird die methode werdeEingeladen gestartet und 2 Buttons angezeigt
            a. rotes Button drücken: wird einen request an
                Bote/ApiEinladenController/@PostMapping(value = "/einladungPrufenApi") mit messageToken + false
                gesendet, schliesslich werden aus die Tabelle freunde die einträge mit dem gleiche messageToken
                unwiderruflich gelöscht
            b. grünes Button drücken: werden auch per request die messageToken + true gesendet, entsprechend
                in spalt role werden die einträge gelöscht...
        4....


    *********************** Click auf dem Freunde Oberfläche **************************

    eine click auf die Freunde-Oberfläche wird in FreundeCellController Zeile: 173 gemacht
    @FXML
    public void cellClick() { ... }
    alle offene Lösch-icons werden automatisch geschlossen
    chat wird in der rechte Pane geladen
    FreundeCellCotroller Zeile: 181

     1. Click auf dem icon links oben (männchen mit minus)
        wird rotes button zum Freunde Löschen angezeigt
     2. Click auf den icon links oben (rundes mit Kreuz)
        wird den Löschen-Button versteckt
     3. Click auf den Rechtes icon (männchen mit plus)
        alle Lösch-Buttons & hover-effect wird versteckt & ausgesetzt
     4. FreundeCellController ab Zeile: 217
            sind Methoden für:
            hover effect + anzeige von freunde remove-button + prüfen ob remove-button angezeigt ist
     5. FreundeController
            sind Methoden für:
            Zeile: 190
            hover effect setzen und merken( activeCellController = currentCellController;)
            Zeile: ab 210
            Freunde remove (alle: Bilder tauschen, pane verstecken, hover aussetzen)
            Zeile: 170
            Bekanten einladen


    * *************************** Freund Remove(click auf dem roten Button) ************* *

     FreundeCellController Zeile: 110:
     an die Methode setProperties(), werden alle Freund-Daten als array von den FreundeController
     Zeile: 170 zugesendet (auch messageToken)

     FreundeCellController Zele: 285 Methode freundRemove(){...}
     eine messageToken werde ermiteln(von setProperties), per request an Bote/@PostMapping(value = "/freundeRemoveApi")
     gesendet, da werden alle Freund-Daten von der tabelle 'freunde' & 'messages' unwiderruflich gelöscht,
     als response wird die anzahl gelöschte einträge von Bote zurüchgesendet,
     hier in FreundeCellController Zeile: 300 wird die Celle-Freund geleert & geschlossen...
     FEHLER: aus welchen gründen auch immer, bei leeren token oder was anderes als response wird 0
     gesendet, für 5 sekunden wird einen warnung angezeigt....

    ***************** MessageController.java + message.fxml *****************************

    1. message.fxml: kurze beschreibung
        ArchorPane -> BorderPane: Top, Center und Bottom sind benutzt
        A. Top: besteht aus eine GridPane mit 5 column
            1. column 0: pfeil zurück, ist eine imageView (25x25)
            2. column 1: anzeige von User-Bild ist eine Label 30x30, das selber Bild
                wird in die Methode: haederFreundeDaten (MessageController, Zeile: 316)
                in das Label mit der [messageProfilBild.setGraphic(imageView);] integriert
                geStylt wird gleich auch da...
            3. column 2: ist ienen Vbox mit der Label(Name ausgegeben) und HBox.
                in der HBox sind 2 Label (1: fehler info ausgabe, 2: freund Online Zeit anzeigen)
            4. column 3:  ImageView(Telefon), nur methode abrufbar, keine weiter function
            5. column 4:  ImageView(...), Methode: messageBearbeiten + 4 zusetlichen Methoden
                            a. radioPaneZeigen
                            b. userInfo
                            c. verlaufLeeren
                            d. bearbeitenClose
        B.  Center: besteht von einer ScrollPane + VBox für die Message ausgaben
                    MessageController/altMessage() Zeile: 350
        C.  Bottom: bestet von einer GridPane mit dem 3 column
            a. column 0: ImageView mit der Methode: otherZeigen ( noch nicht fertig)
            b. column 1: TextArea mit der Methode: messageSenden() Zeile: 440
                         gesendet wird mit 'ENTER'
            c. column 2: ImageView mit der Methode: smileZeigen(), (noch keine smile)

    2. MessageController: kurze beschreibung

        1. Anzeige von Radios Buttons (message löschen) + message Löschen
           von Anfang, wenn wird auf Freunde-Chat geclick werden Automatisch alle altere
           messages aus der Datenbank geladen, das macht die Methode: altMessage() Zeile: 365
           gestartet wird sie in der Setter methode SetMessageToken() Zeile: 138,
           hier werden alle messages(mit zugesendete messageToken) von Datenbank abgeruffen
           und weiter an die methode altMessage(allMessages) gesendet..
            a.  in der methode altMessage() wid der Radios Buttons dynamisch erstellt
                            RadioButton altRadioButton = new RadioButton();
                            altRadioButton.setStyle("-fx-font-size: 0.1px;");
                und in einem VBox gepackt, der VBox befindet sich in einer BorderPane/Right
                die alle Radios Buttons werden in der schleife in einen ToggleGroup
                'final ToggleGroup group = new ToggleGroup();' zusammen gefasst,
                die 'group' array-variable ist Global angelegt... Zeile:470
            b.  für die löschen eine oder mehreren messages clicken sie auf die 3 Punkte(...)
                Header oben Rechts(nur bei gestarteten Chat mit Freunden), da Offnet sich einem
                Pop-up-Fenster, clicken sie auf 'bearbeiten', da aktivieren sie die Methode
                altRadioGroup(), in der methode werde gleich die Globale variable 'group'
                abgeruffen: ungefer so siht sie aus..
                ToggleGroup array-variable group:
                Radio Zeigen: [RadioButton[id=246, styleClass=radio-button]'',
                               RadioButton[id=247, styleClass=radio-button]'',
                               RadioButton[id=248, styleClass=radio-button]'',
                               RadioButton[id=253, styleClass=radio-button]'',
                               RadioButton[id=254, styleClass=radio-button]'']
                in der for schleife werden alle Radios Buttons eine nach der anderer
                die css.style geendert:
                        int groupCount = group.getToggles().size();
                                for (int i = 0; i < groupCount; i++) {
                                    RadioButton name = (RadioButton) group.getToggles().get(i);
                                    name.setStyle("-fx-font-size: 1.0em;");
                                }
            c.


    ****************************** NICHT REGISTRIERT ***********************************

    1.  bei ersten App-start wird zuerst die start methode abgeruffen
        BoteFX.java Methode start/viewService.switchTo(GlobalView.CHATBOX);
        Zeile: 45
        a. in der viewService bei abruf die switchTo (siehe hier oben)  zuerst wird
            in den token.json Datei nach den token(vorgesehen als cookie) gesucht
            wenn token wird gefunden, weiter zu messenger,
            keinen token gefunden, weiter zum Home(Login)

    2.  wenn nicht Registriert
        Home Seite -> welen mit den Mail oder Telefon registrieren
    3.  MailLoginController: Methoden
            a. Stage schliessen
            b. toLowerCase, alles auf kleinbuchstaben umwandeln
            c. Mail Lenge auf 254 Zeichen setzen
            e. mailPrufen():
                mail auf valide prufen(einfach, nach @ & . prufen)
                e-mail-adresse mit request(GlobalApiRequest) an Bote versenden
                MailLoginController Zeile: 91
                ( an GlobalApiRequest wir eine json(http-adresse & e-mail) versendet, von in
                 wird ab Bote gesendet)
                Bote: ApiController:  @PostMapping(value = "/mailApi")
                wird an zugesendet E-Mail-Adresse eine Sicherheits Code gesendet
            d. nach versenden den e-mail weiter zum code prüfen(MailRegisterControlle)
    4.  MailRegisterController: Methoden
        a. erlaubt nur Zahle
        b. bei Zahl angabe wird automatisch an nächsten feld geleitet
        c. stage schliessen
        d. Fehler ausgabe
        e. codePrufen():
            die eingegebenen Zahlen als code wird an Bote/ApiController/@PostMapping(value = "/codeApi")
            versendet und mit dem Code aus E-mail vergleichen
            Falsche Code; response 404 (Aktuel wird als response die richtige code zurück gesendet, für versuch zwecke )
            Richtige Code: werden neue Datum, pseudonym und neuer Token generiert und schliesslich
                            ins Datenbank(MySql:GlobalBote) user & session gespeichert
                            userService.saveNewUser(neuerUser);
                            sessionService.saveLogDaten(sessionDaten);
            zusätzlich werden die Daten zusammen Gstellt und als response an BotxFX/MailRegisterController zurück gesendet
            return ResponseEntity.status(HttpStatus.OK).body(userResponse);
            MailRegisterControlller: response 200 Zeile: 137
                von response-json wird den token ausgelesen und in einen token.json Datei & H2 LocalBote gespeichert
                nur nach dem erfolgreichen speichernung in token.json wir weiter zu MailSuccessController geleitet,
                ACHTUND: die speicherung in token.json dient als 'cookie' und wir bei App start immer abgefragt
                            sihe pos.1 absatzt (a)
                ACHTUNG: die Mysql/localBote zurzeit wird nich beenutzt abwohl in Service abfrage Methode existiert
                Service/TokenService/public Token findeToken(String token).... funk. 100%

    5. MailSuccessController: Information Seite, werden alle gespeicherte Daten Angezeigt
        weiter geht zu messenger als registriert...

    ********************************* SCHON REGISTRIERT *********************************

    1. ********** ChatBoxController + chatbox.fxml **********
    Zusammen Gefasst:
    Haupt Container(chatbox.fxml) besteht aus 2 Teilen:
            1. Linke Seite mit Freunde
                a. integriert: Footer mit menü Panel (Kontakte + Telefonate + Chatten + Setting)
            2. Rechte Seite Chat

    Erste schritte: nach erfolgreichen Registrierung wir die chatbox.fxml mit ChatBoxController geladen

        1. ChatBoxController:
            a. von anfang werden die 4 Methoden gesteuert
                kontakte(),
                telefonate(),
                chatten(), wird automatisch gestartet in public void initialize(...){} Zeile: 197
                setting()
                bei Starten die Methode wird ausgeführt:
                    1. die rightPane geleert
                    2. freundePane an abgerufen Controller gesendet
                    3. fxml datei geleden
                    4. Bild auf BLAU ungeändert

            b.  die Methode changedImg(...) Zeile: 118
                dien nur für die Bilder verändern in der Menü
                (bottom), bei Aktiv = blau, nicht Aktiv = grau

            c. Verkleinerung/Vergrößerung die Seite ab Zeile: 181 ( public void initialize(...){} ),
               die changed() Methode steuert nur die Zwei AnchorPane (leftPane & rightPane), wenn der HauptFenster
               mit der Maus wird verkleinert oder vergrößert,
               die Methode changedPane() Zeile: 315, ist eine Slider-Funktion, functioniert nur unter 650px, gesteuer wird
               über den hyperlink von rightPane oben "Zurück" und in SettingCotroller Zeile: 104
               z.b.s  @Autowired
                      private ChatBoxController chatBoxController;
                      chatBoxController.changedPane("openmessage");
               ...sind erlaubt nur Zwei Parameter("openfreunde" & "openmessage").

    2. ********** SettingController.java + setting.fxml **********
        a. in die Methode initialize() wird der Setting Box auf 100% width gezogen.
        b. an Die Getter & Setter Methode wird von der ChatBoxControlller(die setting gestartet) eine ID von rightPane
            zugesendet(da werder alle setting Positionen geladen: Zeile: 127, layoutService.setausgabeLayout(RightPane);)
            gleichzeitig wir die Methode settingBearbeiten() gestartet um die Allgemein-Position gleich anzeigen, als
            Parameter wir einen NULL gesendet.
            in der Methode settingBearbeiten: wenn zugesendeten Parameter null ist dann bleib die Id als: "allgemein"
            weiter in switch werden die position allgemein ausgeführt
        c. ....

    3. **********